<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Maths Quiz by Category (UK)</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      padding: 20px;
      text-align: center;
      background-color: #f4f4f4;
    }
    .container {
      max-width: 600px;
      margin: auto;
      background: white;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }
    .category-buttons {
      display: flex;
      flex-wrap: wrap; /* ensures wrapping on small screens */
      justify-content: center;
      gap: 10px;
      margin-bottom: 20px;
    }
    .category-buttons button {
      background: #2196f3;
      color: white;
      border: none;
      padding: 10px 15px;
      font-size: 16px;
      border-radius: 5px;
      cursor: pointer;
      /* ensures each button is side by side, but wraps on narrow screens */
      flex: 1 1 auto;
      min-width: 100px;
    }
    .category-buttons button:hover {
      background: #0b87e2;
    }
    .question-container {
      margin-bottom: 20px;
      padding: 15px;
      border: 2px solid #4CAF50;
      border-radius: 10px;
      background: #e8f5e9;
    }
    .feedback {
      font-weight: bold;
      margin-top: 10px;
    }
    .correct {
      color: green;
    }
    .incorrect {
      color: red;
    }
    button {
      display: block;
      width: 100%;
      margin: 5px 0;
      padding: 10px;
      font-size: 16px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }
    button:hover {
      background-color: #45a049;
    }
    .nav {
      margin-top: 20px;
      background: #f44336;
    }
    .nav:hover {
      background: #e43a2b;
    }
    .progress {
      margin-top: 20px;
      font-size: 18px;
    }
  </style>
</head>
<body>
  <div class="container">
    <h2>Maths Quiz by Category (UK)</h2>
    <button onclick="goBack()" class="nav">Back to Subject Selection</button>

    <p><strong>Child:</strong> <span id="selected-child"></span></p>
    <p><strong>Age Group:</strong> <span id="selected-age"></span></p>

    <!-- Category Buttons in a row (flex) -->
    <div class="category-buttons">
      <button onclick="selectCategory('arithmetic')">Arithmetic</button>
      <button onclick="selectCategory('geometry')">Geometry</button>
      <button onclick="selectCategory('fractions')">Fractions</button>
      <button onclick="selectCategory('algebra')">Algebra</button>
      <button onclick="selectCategory('wordProblems')">Word Problems</button>
    </div>

    <div id="quiz-container"></div>
    <p class="progress">
      Correct: <span id="correct-count">0</span> |
      Incorrect: <span id="incorrect-count">0</span>
    </p>
  </div>

  <script>
    // Retrieve child's name and age from localStorage or fallback
    const selectedChild = localStorage.getItem("selectedChild") || "Not selected";
    let selectedAge = localStorage.getItem("selectedAge");

    if (!selectedAge || selectedAge === "null" || selectedAge === "undefined") {
      const urlParams = new URLSearchParams(window.location.search);
      selectedAge = urlParams.get("age");
    }

    if (selectedAge && !isNaN(selectedAge)) {
      selectedAge = parseInt(selectedAge, 10);
    } else {
      selectedAge = "Not selected";
    }

    console.log("Loaded Age:", selectedAge);

    document.getElementById("selected-child").textContent = selectedChild;
    document.getElementById("selected-age").textContent = selectedAge;

    // Global counters
    let correctCount = 0;
    let incorrectCount = 0;

    let allQuestions = [];
    let currentIndex = 0;

    // Our data structure: age -> { subcat -> [ questions ] }
    const ukMathData = {
      8: {
        arithmetic: [
          { question: "What is 12 ÷ 3?", options: ["2", "3", "4", "6"], correctAnswer: "4" },
          { question: "Double 6 is...", options: ["8", "10", "12", "14"], correctAnswer: "12" }
        ],
        geometry: [
          { question: "A square has 4 sides of length 5. What is its perimeter?", options: ["10", "15", "20", "25"], correctAnswer: "20" },
          { question: "How many sides does a triangle have?", options: ["2", "3", "4", "5"], correctAnswer: "3" }
        ],
        fractions: [
          { question: "Half of 8 is...?", options: ["2", "3", "4", "6"], correctAnswer: "4" },
          { question: "Which fraction equals 1/2?", options: ["2/2", "1/3", "2/4", "3/4"], correctAnswer: "2/4" }
        ],
        algebra: [
          { question: "Solve for x: x + 2 = 5", options: ["7", "3", "1", "-2"], correctAnswer: "3" }
        ],
        wordProblems: [
          { question: "Tom had 5 sweets. He ate 2. How many left?", options: ["2", "3", "4", "5"], correctAnswer: "3" }
        ]
      },
      9: {
        arithmetic: [
          { question: "What is 9 × 7?", options: ["63", "54", "49", "71"], correctAnswer: "63" },
          { question: "What is 18 ÷ 2?", options: ["7", "8", "9", "10"], correctAnswer: "9" }
        ],
        geometry: [
          { question: "A rectangle is 6cm by 2cm. Perimeter?", options: ["8cm", "12cm", "16cm", "20cm"], correctAnswer: "16cm" },
          { question: "How many vertices does a pentagon have?", options: ["3", "4", "5", "6"], correctAnswer: "5" }
        ],
        fractions: [
          { question: "1/3 + 2/3 = ?", options: ["1/6", "3/3", "3/6", "2/3"], correctAnswer: "3/3" },
          { question: "What is 1/2 of 10?", options: ["2", "4", "5", "6"], correctAnswer: "5" }
        ],
        algebra: [
          { question: "Solve for x: x - 4 = 5", options: ["1", "2", "9", "-1"], correctAnswer: "9" }
        ],
        wordProblems: [
          { question: "Jake has 10 apples. He gives 3 away. How many left?", options: ["7", "5", "4", "9"], correctAnswer: "7" }
        ]
      }
      // expand for 10-16 if desired
    };

    // Called when the user clicks a subcategory button
    function selectCategory(subcategory) {
      const quizContainer = document.getElementById("quiz-container");
      quizContainer.innerHTML = "";

      // If no data for this age or subcat
      if (!ukMathData[selectedAge] || !ukMathData[selectedAge][subcategory]) {
        quizContainer.innerHTML = `<p>No ${subcategory} quiz available for age ${selectedAge}.</p>`;
        return;
      }

      // Build unlimited question array
      allQuestions = [...ukMathData[selectedAge][subcategory]];
      shuffleArray(allQuestions);
      currentIndex = 0;

      displayQuestion();
    }

    function displayQuestion() {
      const quizContainer = document.getElementById("quiz-container");
      quizContainer.innerHTML = "";

      if (!allQuestions.length) {
        quizContainer.innerHTML = "<p>No questions found.</p>";
        return;
      }

      // If we run out, reshuffle & start over
      if (currentIndex >= allQuestions.length) {
        shuffleArray(allQuestions);
        currentIndex = 0;
      }

      const item = allQuestions[currentIndex];

      // Build question container
      const questionDiv = document.createElement("div");
      questionDiv.className = "question-container";
      questionDiv.innerHTML = `<p>${item.question}</p>`;

      item.options.forEach(option => {
        const btn = document.createElement("button");
        btn.innerText = option;
        btn.onclick = () => checkAnswer(btn, option, item.correctAnswer);
        questionDiv.appendChild(btn);
      });

      const feedbackP = document.createElement("p");
      feedbackP.id = "feedback";
      feedbackP.className = "feedback";
      questionDiv.appendChild(feedbackP);

      quizContainer.appendChild(questionDiv);
    }

    function checkAnswer(button, userAnswer, correctAnswer) {
      const feedbackDiv = document.getElementById("feedback");
      const buttons = button.parentNode.querySelectorAll("button");

      // disable all answers
      buttons.forEach(btn => {
        btn.disabled = true;
        if (btn.innerText === correctAnswer) {
          btn.style.backgroundColor = "green";
        } else {
          btn.style.backgroundColor = "red";
        }
      });

      if (userAnswer === correctAnswer) {
        feedbackDiv.innerText = "Correct! 🎉";
        feedbackDiv.classList.add("correct");
        correctCount++;
      } else {
        feedbackDiv.innerText = `Incorrect! ❌ The correct answer was: ${correctAnswer}`;
        feedbackDiv.classList.add("incorrect");
        incorrectCount++;
      }

      document.getElementById("correct-count").innerText = correctCount;
      document.getElementById("incorrect-count").innerText = incorrectCount;

      setTimeout(() => {
        currentIndex++;
        displayQuestion();
      }, 1500);
    }

    function shuffleArray(arr) {
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
    }

    function goBack() {
      window.location.href = "subject selection.html";
    }
  </script>
</body>
</html>
